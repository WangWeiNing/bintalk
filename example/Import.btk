// Single line comment.
/* Mutiline comment.
*/

/* Enumeration Definition. */
enum EnumName
{
	EN1,
	EN2,
	EN3,
}

struct StructType
{
	string aaa_;
	int32 bbb_;
}

/* Structure Definition.*/
struct StructBase
{
	/* Basic types */
	double 	double_;
	float	float_;
	int64	int64_;
	uint64	uint64_;
	int32	int32_;
	uint32	uint32_;
	int16	int16_;
	uint16	uint16_;
	int8	int8_;
	uint8	uint8_;
	bool	bool_;
	// enum type.
	EnumName enum_;
	// struct type
	StructType struct_;
	// string type.
	string	string_;
	// string type with explicit max length.
	string(32)	string1_;
	// binary type.
	binary	bin_;
	// binary type with explicit max length.
	binary(32) bin1_;
	/* array type. */
	double[] 	doubleArray_;
	float[]		floatArray_;
	int64[]		int64Array_;
	uint64[]	uint64Array_;
	int32[]		int32Array_;
	uint32[]	uint32Array_;
	int16[]		int16Array_;
	uint16[]	uint16Array_;
	int8[]		int8Array_;
	uint8[]		uint8Array_;
	bool[]		boolArray_;
	string[] 	strArray_;
	string(16)[8] strArray1_;
	binary[] 	binArray_;
	binary(32)[] 	bin1Array_;
	EnumName[] enumArray_;
	StructType[] structArray_;
}

/* Service type. */
service ServiceBase
{
	method1(string(32) username, string(32) password);
	method2(StructBase s);
}

